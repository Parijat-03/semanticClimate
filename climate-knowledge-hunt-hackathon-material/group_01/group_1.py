# -*- coding: utf-8 -*-
"""GROUP 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ya2Ofj0Gy6_AVuCOxAA3oBMGw2mYmh_D
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/petermr/semanticClimate.git
!pip install pandas
!pip install numpy
# %pip install transformers

import torch
import os
import pandas as pd

import json
import requests

import numpy as np

print('\033[1;32m We have successfully finished running this cell.')

text = "Rhizoctonia is a genus of anamorphic fungi in the order Cantharellales and family Ceratobasidiaceace. Rhizoctonia species do not produce spores, but are composed of hyphae and sclerotia (hyphal propagules), asexual stage of fungi. Rhizoctonia species are saprophytic, but some act as facultative plant pathogens causing commercially important crop diseases"

def keyword_extraction(text):
    keywords = []
    API_URL = "https://api-inference.huggingface.co/models/ml6team/keyphrase-extraction-kbir-inspec"
    headers = {"Authorization": "Bearer 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"}
    def query(payload):
            response = requests.post(API_URL, headers=headers, json=payload)
            return response.json()

    output = query({
                      "inputs": text,
                        "options": "wait_for_model=true"
                        }) 
    # print(output)      
    for f in output:
      try: 
          word = (f['word'])
          keywords.append(word)
      except:
        pass

    keyphrases = [*set(keywords)]

    return keyphrases
print('\033[1;32m We have successfully finished running this cell.')

key=keyword_extraction(text)
print(key)

df = pd.read_csv('/content/semanticClimate/paragraphLinking/total_pages_groups_table.csv')
df["anchor_keywords"] = df["anchor_text"].apply(lambda x: keyword_extraction(x))
df["target_keywords"] = df["target_text"].apply(lambda x: keyword_extraction(x))
df.to_csv('/content/total_pages_groups_table.csv', index=None)
print('\033[1;32m We have successfully finished running this cell.')

print(grade_keyphrases(keyword_extraction(text), text))

"""The grade_keyword() function takes two arguments: a keyword and a text.
The function first calculates the relevance score. This is done by checking if the keyword is present in the text. If it is, then the relevance score is 1. Otherwise, the relevance score is 0.

The function then calculates the specificity score. This is done by checking if the keyword is more than one word long. If it is, then the specificity score is 1. Otherwise, the specificity score is 0.

The function then calculates the length score. This is done by checking if the keyword is less than or equal to 10 characters long. If it is, then the length score is 1. Otherwise, the length score is 0.

The function then calculates the uniqueness score. This is done by checking if the keyword is the only instance of itself in the text. If it is, then the uniqueness score is 1. Otherwise, the uniqueness score is 0.

The function then calculates the final score. This is done by averaging the relevance score, specificity score, length score, and uniqueness score.
"""

def grade_keyword(keyword, text):
  """
  Grades an individual keyword based on its relevance, specificity, length, and uniqueness.

  Args:
    keyword: A keyword.
    text: The text that the keyword was generated from.

  Returns:
    A score that represents the quality of the keyword.
  """

  # Calculate the relevance score.
  relevance_score = 0
  if keyword in text:
    relevance_score = 1

  # Calculate the specificity score.
  specificity_score = 0
  if len(keyword) > 1:
    specificity_score = 1

  # Calculate the length score.
  length_score = 0
  if len(keyword) <= 10:
    length_score = 1

  # Calculate the uniqueness score.
  uniqueness_score = 0
  for i in range(len(text.split())):
    if keyword == text.split()[i]:
      uniqueness_score = 1
      break

  # Calculate the final score.
  final_score = relevance_score * 0.25 + specificity_score * 0.25 + length_score * 0.25 + uniqueness_score * 0.25

  return final_score


def main():
  # Get the text and keyword from the user.
  text = input("Enter the text: ")

  # Grade the keyword.
  for i in keyword_extraction(text):
    score = grade_keyword(i, text)
    print(i, score)


  # Print the score.
  


if __name__ == "__main__":
  main()